# Similar to configmaps, but hashed

kubectl create secret generic <secret-name> --from-literal=<key>=<value>

kubectl create secret generic app-secret --from-literal=DB_Host=mysql --from-literal...

kubectl create secret generic <secret-name> --from-file=<path-to-file>

# OR

apiVErsion: v1
kind: Secret
metadata:
  name: app-secret
data:
  DB_Host: bXlzcWw=
  DB_User: cm9vdA==
  DB_Password: cGFzd3Jk

echo -n 'mysql' | base64
echo -n 'root' | base64
echo -n 'paswrd' | base64
# it must be encoded

kubectl get secrets
kubectl describe secrets
kubectl get secret <secret-name> -o yaml    // to see hidden values

# to decode values
echo -n 'mysql' | base64 --decode

# Insert into pod
# insert entire secret with all values
envFrom:
  - secretRef:
      name: app-secret

# Insert only some values
env:
  - name: DB_PASSWORD
    valueFrom:
      secretKeyRef:
        name: app-secret
        key: DB_PASSWORD

# Insert secret as volume, each key represents a file with value written inside
volumes:
- name: app-secret-volume
  secret:
    secretName: app-secret

# Best practices:

Not checking-in secret object definition files to source code repositories.

Enabling Encryption at Rest for Secrets so they are stored encrypted in ETCD.

# The way kubernetes handles secrets. Such as:

A secret is only sent to a node if a pod on that node requires it.

Kubelet stores the secret into a tmpfs so that the secret is not written to disk storage.

Once the Pod that depends on the secret is deleted, kubelet will delete its local copy of the secret data as well.